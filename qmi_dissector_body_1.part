f.msglen =    ProtoField.uint16("qmi.message_len", "Message Length", base.DEC)
-- TLVs
f.tlvt =      ProtoField.uint8("qmi.tlv_type", "TLV Type", base.HEX)
f.tlvl =      ProtoField.uint16("qmi.tlv_len", "TLV Length", base.DEC)
f.tlvv =      ProtoField.bytes("qmi.tlv_value", "TLV Value")

--
-- Utils Functions
--

compare_tvb = function(a1,a2,a_len)
	for i=0,a_len-1
		do
			if a1(i,1):uint() ~= a2(i,1):uint() then return false end
		end

		return true
	end

local function getstring(finfo)
	local ok, val = pcall(tostring, finfo)
	if not ok then val = "(unknown)" end
	return val
end

--
-- Dissector Function
--
function qmi_proto.dissector(buffer, pinfo, tree)
	local is_mbim = false
	local usb_bInterfaceClass = usb_bInterfaceClass_f()

	-- Check if this is QMI-over-MBIM looking at the interface class that should be CDC
	if getstring(usb_bInterfaceClass) == "2" or getstring(usb_bInterfaceClass) == "0x02" then
		is_mbim = true
		tvb_qmi_over_mbim_service_uuid = ByteArray.tvb(qmi_over_mbim_service_uuid, "qmi_over_mbim_service_uuid Tvb")
		len_tvb_qmi_over_mbim_service_uuid = tvb_qmi_over_mbim_service_uuid:len()
	end

	-- Set offset according to operating system
	local off
	if package.config:sub(1,1) == '\\' then
		off = 28			-- USB pcap pseudoheader: does not include setup data, so URB size depends being a request or response
		setup_data = 8
	else
		off = 64			-- URB header size: this includes setup data or padding, so size is always the same
		setup_data = 0
	end

	if buffer:len() - off < 12 then
		-- No payload or too short (12 is a min size)
		return
	end

	-- If this is QMI-over-MBIM check length to avoid parsing all the other MBIM messages different than the ones indicated below (off + MBIM INDICATE header size is the smallest packet)
	if is_mbim and buffer:len() > (off + 44) then
		local offset_mbim_service_uuid
		local additional_offset_to_qmi
		local mbim_control_header_message_type = mbim_control_header_message_type_f()

		-- MBIM message types:
		-- 0x00000003 MBIM COMMAND MSG
		-- 0x80000003 MBIM COMMAND DONE
		-- 0x80000007 MBIM INDICATE
		if getstring(mbim_control_header_message_type) == "0x00000003" then
			-- offset_mbim_service_uuid = off (that could be USBpcap pseudoheader (28) or URB header size (64)) + setup data size + USB SEND ENCAPSULATED COMMAND (8) + MBIM COMMAND MSG up to device_service_uuid (20)
			offset_mbim_service_uuid = off + setup_data + 20
			-- additional_offset_to_qmi = len_tvb_qmi_over_mbim_service_uuid + remaining MBIM COMMAND MSG header to information buffer (12)
			additional_offset_to_qmi = len_tvb_qmi_over_mbim_service_uuid + 12
		elseif getstring(mbim_control_header_message_type) == "0x80000003" then
			-- offset_mbim_service_uuid = off (that could be USBpcap pseudoheader (28) or URB header size (64)) + MBIM COMMAND DONE up to device_service_uuid (20)
			offset_mbim_service_uuid = off + 20
			-- additional_offset_to_qmi = len_tvb_qmi_over_mbim_service_uuid + remaining MBIM COMMAND DONE header to information buffer (12)
			additional_offset_to_qmi = len_tvb_qmi_over_mbim_service_uuid + 12
		elseif getstring(mbim_control_header_message_type) == "0x80000007" then
			-- offset_mbim_service_uuid = off (that could be USBpcap pseudoheader (28) or URB header size (64)) + MBIM INDICATE up to device_service_uuid (20)
			offset_mbim_service_uuid = off + 20
			-- additional_offset_to_qmi = len_tvb_qmi_over_mbim_service_uuid + remaining MBIM INDICATE header to information buffer (8)
			additional_offset_to_qmi = len_tvb_qmi_over_mbim_service_uuid + 8
		else
			return
		end

		local mbim_service_uuid = buffer(offset_mbim_service_uuid, len_tvb_qmi_over_mbim_service_uuid)

		if compare_tvb(tvb_qmi_over_mbim_service_uuid, mbim_service_uuid, len_tvb_qmi_over_mbim_service_uuid) == true then
			off = offset_mbim_service_uuid + additional_offset_to_qmi
		end
	end

	local tf = buffer(off,1)
	if off == 28 and tf:uint() == 0x21 then
		-- In Windows we should skip the setup data part in requests
		off = off + setup_data
		tf = buffer(off,1)	-- Now it should be 0x01, the initial byte for QMUX header
	end

	-- QMUX Header (6 bytes), see GobiNet/QMI.h, should always start with 0x01
	if tf:uint() ~= 1 then
		-- Not a QMI packet
		return
	end
	local len = buffer(off+1,2)	-- Length
	if len:le_uint() ~= buffer:len() - off - 1 then
		-- Length does not match
		return
	end
	local flag = buffer(off+3,1)	-- Always 0x00 (out) or 0x80 (in)
	if flag:uint() ~= 0x00 and flag:uint() ~= 0x80 then
		-- Not a QMI packet
		return
	end
	local svcid = buffer(off+4,1)	-- Service ID
	local cid = buffer(off+5,1)	-- Client ID

	-- Setup protocol subtree
	local qmitree = tree:add(qmi_proto, buffer(off, buffer:len() - off), "QMI")
	local hdrtree = qmitree:add(qmi_proto, buffer(off, 6), "QMUX Header")
	hdrtree:add(f.tf, tf)
	hdrtree:add_le(f.len, len)
	hdrtree:add(f.flag, flag)
	hdrtree:add(f.svcid, svcid)
	hdrtree:add(f.cid, cid)
	off = off + 6

	-- Transaction Header (2 or 3 bytes), see GobiAPI/Core/QMIBuffers.h
	local responsebit
	local indicationbit
	if svcid:uint() == 0 then
		responsebit = buffer(off, 1):bitfield(7)
		indicationbit = buffer(off, 1):bitfield(6)
		local thdrtree = qmitree:add(qmi_proto, buffer(off, 2), "Transaction Header")
		tid = buffer(off+1,1)
		thdrtree:add(f.resp_ctl, buffer(off, 1))
		thdrtree:add(f.ind_ctl, buffer(off, 1))
		thdrtree:add(f.tid_ctl, tid)
		off = off + 2
	else
		responsebit = buffer(off, 1):bitfield(6)
		indicationbit = buffer(off, 1):bitfield(5)
		local thdrtree = qmitree:add(qmi_proto, buffer(off, 3), "Transaction Header")
		tid = buffer(off+1,2)
		thdrtree:add(f.comp_svc, buffer(off, 1))
		thdrtree:add(f.resp_svc, buffer(off, 1))
		thdrtree:add(f.ind_svc, buffer(off, 1))
		thdrtree:add_le(f.tid_svc, tid)
		off = off + 3
	end

	-- Message Header (4 bytes), see GobiAPI/Core/QMIBuffers.h
	local msgstr
	msgid = buffer(off, 2)
	msglen = buffer(off+2, 2)
	local mhdrtree = qmitree:add(qmi_proto, buffer(off, 4), "Message Header")
